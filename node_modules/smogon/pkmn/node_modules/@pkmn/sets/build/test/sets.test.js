"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sets_1 = require("../sets");
const data_1 = require("./data");
function imported(s) {
    return s.split('\n').map(x => x.trim()).filter(x => x).join('\n');
}
function exported(s) {
    return s.split('\n')
        .map((x) => x.trim())
        .filter(x => x)
        .map(x => x + '  ')
        .join('\n') +
        '\n\n';
}
describe('Sets', () => {
    describe('importSet + exportSet', () => {
        it('blissey', () => {
            const blissey = `
        Blissey @ Leftovers
        Ability: Natural Cure
        EVs: 148 HP / 252 Def / 108 SpD
        Bold Nature
        - Wish
        - Toxic
        - Protect
        - Seismic Toss`;
            expect(sets_1.Sets.toString(sets_1.Sets.fromString(imported(blissey))))
                .toEqual(exported(blissey));
        });
        it('marowak (gen 2)', () => {
            const marowakIn = imported(`
        Marowak (M) @ Thick Club
        - Earthquake
        - Hidden Power [Bug]
        - Frustration
        - Swords Dance`);
            // NOTE: we differ slightly from PS as we don't specify IV: 30 HP
            const marowakOut = exported(`
        Marowak (M) @ Thick Club
        Happiness: 0
        IVs: 26 Atk / 26 Def
        - Earthquake
        - Hidden Power [Bug]
        - Frustration
        - Swords Dance`);
            expect(sets_1.Sets.exportSet(sets_1.Sets.importSet(marowakIn, data_1.GEN[2]), data_1.GEN[2]))
                .toEqual(marowakOut);
        });
        it('magnezone', () => {
            const magnezoneIn = imported(`
        Maggy (Magnezone) @ No Item
        Trait: Sturdy
        Level: 50
        Shiny: Yes
        Happiness: 0
        EVs: 85 HP / 85 Atk / 85 Def / 85 SpA / 85 SpD / 85 Spe
        Serious nature
        IVs: 1 HP / 29 Def / 28 SpA / 26 SpD / 26 Spe
        ~ Thunderbolt
        ~
        ~ Flash Cannon
        ~ Hidden Power [Flying]
        ~ Volt Switch`);
            const magnezoneOut = exported(`
        Maggy (Magnezone)
        Ability: Sturdy
        Level: 50
        Shiny: Yes
        Happiness: 0
        EVs: 85 HP / 85 Atk / 85 Def / 85 SpA / 85 SpD / 85 Spe
        Serious Nature
        IVs: 1 HP / 29 Def / 28 SpA / 26 SpD / 26 Spe
        - Thunderbolt
        - Flash Cannon
        - Hidden Power [Flying]
        - Volt Switch`);
            expect(sets_1.Sets.exportSet(sets_1.Sets.importSet(magnezoneIn)))
                .toEqual(magnezoneOut);
        });
        it('tauros (rby)', () => {
            const tauros = `
        Tauros
        - Blizzard
        - Body Slam
        - Earthquake
        - Hyper Beam`;
            expect(sets_1.Sets.exportSet(sets_1.Sets.importSet(imported(tauros))))
                .toEqual(exported(tauros));
        });
        it('fake', () => {
            const fake = `
        Fakey (Fake) @ Fake
        Ability: Fake
        - Fake Move 1
        - Fake Move 2
        - Fake Move 3
        - Hidden Power [Fake]`;
            expect(sets_1.Sets.exportSet(sets_1.Sets.importSet(imported(fake))))
                .toEqual(exported(fake));
        });
        it('nothing', () => {
            expect(sets_1.Sets.importSet('')).not.toBeDefined();
        });
    });
    describe('pack + unpack', () => {
        it('m-alakazam', () => {
            const malakazam = `
        Alakazam-Mega (F) @ Alakazite
        Ability: Magic Guard
        EVs: 252 SpA / 252 Spe
        Timid Nature
        IVs: 0 Atk
        - Psychic
        - Focus Blast
        - Shadow Ball
        - Recover`;
            const u = sets_1.Sets.unpack(sets_1.Sets.pack(sets_1.Sets.importSet(imported(malakazam))));
            expect(sets_1.Sets.exportSet(u, data_1.GEN[7])).toEqual(exported(malakazam));
        });
        it('tangrowth (packed in)', () => {
            const tangrowthIn = 'Tangrowth||assaultvest|H|gigadrain,knockoff' +
                ',powerwhip,earthquake|Sassy|248,,8,,252,||,30,30,,,|||,Ice,';
            const tangrowthOut = exported(`
        Tangrowth @ Assault Vest
        Ability: Regenerator
        Hidden Power: Ice
        EVs: 248 HP / 8 Def / 252 SpD
        Sassy Nature
        IVs: 30 Atk / 30 Def
        - Giga Drain
        - Knock Off
        - Power Whip
        - Earthquake`);
            const u = sets_1.Sets.unpack(tangrowthIn, data_1.GEN[7]);
            expect(sets_1.Sets.unpack(sets_1.Sets.pack(u), data_1.GEN[7])).toEqual(Object.assign(Object.assign({}, u), { ability: 'regenerator' }));
            expect(sets_1.Sets.exportSet(u, data_1.GEN[7])).toEqual(tangrowthOut);
        });
        it('magnezone', () => {
            const magnezoneIn = imported(`
        Maggy (Magnezone) @ No Item
        Trait: Sturdy
        Level: 50
        Shiny: Yes
        Happiness: 0
        EVs: 85 HP / 85 Atk / 85 Def / 85 SpA / 85 SpD / 85 Spe
        Serious nature
        IVs: 1 HP / 29 Def / 28 SpA / 26 SpD / 26 Spe
        ~ Thunderbolt
        ~
        ~ Flash Cannon
        ~ Hidden Power [Flying]
        ~ Volt Switch`);
            const magnezoneOut = exported(`
        Maggy (Magnezone)
        Ability: Sturdy
        Level: 50
        Shiny: Yes
        Happiness: 0
        EVs: 85 HP / 85 Atk / 85 Def / 85 SpA / 85 SpD / 85 Spe
        Serious Nature
        IVs: 1 HP / 29 Def / 28 SpA / 26 SpD / 26 Spe
        - Thunderbolt
        - Flash Cannon
        - Hidden Power [Flying]
        - Volt Switch`);
            const u = sets_1._unpack((sets_1.Sets.pack(sets_1.Sets.importSet(magnezoneIn, data_1.GEN[7]))) + ']').set;
            expect(sets_1.Sets.exportSet(u, data_1.GEN[7])).toEqual(magnezoneOut);
        });
        it('tauros', () => {
            const taurosIn = imported(`
        Tauros
        - Blizzard
        - Body Slam
        - Earthquake
        - Hyper Beam`);
            const taurosOut = exported(`
        Tauros
        - Blizzard
        - Body Slam
        - Earthquake
        - Hyper Beam`);
            const u = sets_1.Sets.unpack(sets_1.Sets.pack(sets_1.Sets.importSet(taurosIn, data_1.GEN[1])));
            expect(sets_1.Sets.exportSet(u, data_1.GEN[1])).toEqual(taurosOut);
        });
        it('blissey (after unpack)', () => {
            const blisseyIn = imported(`
        Blissey @ Leftovers
        Ability: Natural Cure
        EVs: 148 HP / 252 Def / 108 SpD
        Bold Nature
        - Wish
        - Toxic
        - Protect
        - Seismic Toss`);
            const blisseyOut = exported(`
        Blissey @ leftovers
        Ability: naturalcure
        EVs: 148 HP / 252 Def / 108 SpD
        Bold Nature
        - wish
        - toxic
        - protect
        - seismictoss`);
            const u = sets_1.Sets.unpack(sets_1.Sets.pack(sets_1._import(blisseyIn.split('\n')).set));
            expect(sets_1.Sets.exportSet(u)).toEqual(blisseyOut);
        });
        it('fake', () => {
            const fakeIn = imported(`
        Fakey (Fake) @ Fake
        Ability: Fake
        - Fake Move 1
        - Fake Move 2
        - Fake Move 3
        - Fake Move 4`);
            const fakeOut = exported(`
        Fakey (fake) @ fake
        Ability: fake
        - fakemove1
        - fakemove2
        - fakemove3
        - fakemove4`);
            const u = sets_1.Sets.unpack(sets_1.Sets.pack(sets_1.Sets.importSet(fakeIn)));
            expect(sets_1.Sets.exportSet(u)).toEqual(fakeOut);
        });
        it('partial', () => {
            let p = '';
            expect(sets_1.Sets.unpack(p)).not.toBeDefined();
            p += 'Tangrowth';
            expect(sets_1.Sets.unpack(p)).not.toBeDefined();
            p += '|';
            expect(sets_1.Sets.unpack(p)).not.toBeDefined();
            p += '|assaultvest';
            expect(sets_1.Sets.unpack(p)).not.toBeDefined();
            p += '|regenerator';
            expect(sets_1.Sets.unpack(p)).not.toBeDefined();
            p += '|gigadrain,knockoff,powerwhip,earthquake';
            expect(sets_1.Sets.unpack(p)).not.toBeDefined();
            p += '|Sassy';
            expect(sets_1.Sets.unpack(p)).not.toBeDefined();
            p += '|248';
            expect(sets_1.Sets.unpack(p + '|')).not.toBeDefined();
            p += ',,8,,252,';
            expect(sets_1.Sets.unpack(p)).not.toBeDefined();
            p += '|';
            expect(sets_1.Sets.unpack(p)).not.toBeDefined();
            p += '|,30,30,,,';
            expect(sets_1.Sets.unpack(p)).not.toBeDefined();
            p += '|';
            expect(sets_1.Sets.unpack(p)).not.toBeDefined();
            p += '|';
            expect(sets_1.Sets.unpack(p)).not.toBeDefined();
            p += '|,ice,';
            expect(sets_1.Sets.unpack(p)).toBeDefined();
        });
        it('bad types', () => {
            let suicune = { name: 'Suicune', pokeball: 'Cherish Ball' };
            const u = sets_1.Sets.unpack(sets_1.Sets.pack(suicune));
            expect(sets_1.Sets.exportSet(u)).toEqual(exported(`Suicune
        Pokeball: cherishball`));
            expect(sets_1.Sets.exportSet(suicune)).toEqual(exported(`Suicune
        Pokeball: Cherish Ball`));
            suicune = {
                name: 'Suicune',
                ivs: { hp: undefined },
                moves: ['Hidden Power Bug'],
            };
            expect(sets_1.Sets.exportSet(suicune))
                .toEqual(exported('Suicune\n- Hidden Power [Bug]'));
            suicune = {
                name: 'Suicune',
                moves: ['Hidden Power [Bug]', 'hiddenpowerdark'],
            };
            expect(sets_1.Sets.exportSet(suicune)).toEqual(exported(`Suicune
        - Hidden Power [Bug]
        - Hidden Power [Dark]`));
        });
    });
    it('weird import', () => {
        const weirdIn = imported(`
        @ Leftovers
        Ability: Illuminate
        /
        EVs: 0 Foo / N Atk / 9
        undefined Nature
        IVs: 0 Foo / N Atk / 9`);
        const weirdOut = exported(`
        @ Leftovers
        Ability: Illuminate`);
        expect(sets_1.Sets.exportSet(sets_1.Sets.importSet(weirdIn))).toEqual(weirdOut);
    });
    it('toJSON + fromJSON', () => {
        const malakazam = `
      Alakazam-Mega (F) @ Alakazite
      Ability: Magic Guard
      EVs: 252 SpA / 252 Spe
      Timid Nature
      IVs: 0 Atk
      - Psychic
      - Focus Blast
      - Shadow Ball
      - Recover`;
        const fj = sets_1.Sets.fromJSON(sets_1.Sets.toJSON(sets_1.Sets.importSet(imported(malakazam))));
        expect(sets_1.Sets.exportSet(fj)).toEqual(exported(malakazam));
        expect(sets_1.Sets.fromJSON('foo')).not.toBeDefined();
    });
});
//# sourceMappingURL=sets.test.js.map