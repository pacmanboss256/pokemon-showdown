"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const teams_1 = require("../teams");
const data_1 = require("./data");
const readTeam = (file) => fs.readFileSync(`${__dirname}/fixtures/${file}`, 'utf8');
const TEAM = readTeam('team');
const TEAMS = readTeam('teams');
describe('Team', () => {
    it('importTeam + exportTeam', () => {
        const t = teams_1.Team.fromString(TEAM);
        expect(t.toString()).toEqual(TEAM);
        expect(teams_1.Teams.exportTeams([t]))
            .toEqual('=== Untitled 1 ===\n\n' + TEAM + '\n');
    });
    it('pack + unpack', () => {
        const u = teams_1.Team.import((teams_1.Team.import(TEAM).pack()) + '\n');
        expect(u.export(data_1.GEN[7])).toEqual(TEAM);
    });
    it('bad format', () => {
        const t = new teams_1.Team([], data_1.GEN[8], 'uu');
        expect(t.gen).toBe(6);
    });
    it('toJSON + fromJSON', () => {
        const fj = teams_1.Team.unpack(teams_1.Team.import(TEAM).toJSON());
        expect(fj.export()).toEqual(TEAM);
        expect(teams_1.Team.fromJSON('{"foo": "bar"}')).not.toBeDefined();
    });
});
describe('Teams', () => {
    it('importTeams + exportTeams', () => {
        let imported = teams_1.Teams.fromString(TEAMS.replace(/\[ou\]/, ''), data_1.GEN[8]);
        expect(imported[0].gen).toBe(8);
        imported = teams_1.Teams.fromString(TEAMS, data_1.GEN[8]);
        expect(imported).toHaveLength(2);
        expect(imported[0].gen).toBe(6);
        expect(imported[0].name).toBe('Bulky Offense');
        expect(imported[0].folder).toBe('');
        expect(imported[1].gen).toBe(1);
        expect(imported[1].name).toBe('Cloyster');
        expect(imported[1].folder).toBe('RBY');
        expect(teams_1.Teams.toString(imported))
            .toEqual(TEAMS.replace(/\[ou\]/, '[gen6ou]'));
        expect(teams_1.Teams.importTeam('')).not.toBeDefined();
        expect(teams_1.Teams.importTeam(TEAMS, data_1.GEN[8])).toEqual(imported[0]);
    });
    it('unpack', () => {
        expect(teams_1.Teams.unpackTeam('')).not.toBeDefined();
        expect(teams_1.Teams.unpackTeam('foo')).not.toBeDefined();
        expect(teams_1.Teams.importTeams('|\n\n\n')).toEqual([]);
    });
    it('including packed', () => {
        const teams = teams_1.Teams.importTeams(TEAMS);
        const team = teams_1.Team.import(TEAM);
        let both = 'ou]RBY/Cloyster|' + (teams[1].pack()) + '\n' +
            teams_1.Teams.exportTeams([teams[0]]) + '|' + team.pack();
        let imported = teams_1.Teams.importTeams(both, data_1.GEN[8]);
        expect(imported[0].gen).toBe(6);
        both = 'gen1ou]RBY/Cloyster|' + (teams[1].pack()) + '\n' +
            teams_1.Teams.exportTeams([teams[0]]) + '|' + team.pack();
        imported = teams_1.Teams.importTeams(both, data_1.GEN[8]);
        expect(imported).toHaveLength(3);
        expect(imported[0].team).toHaveLength(6);
        expect(imported[1].team).toHaveLength(6);
        expect(imported[2].team).toHaveLength(6);
        expect(imported[0].gen).toBe(1);
        expect(imported[0].name).toBe('Cloyster');
        expect(imported[0].folder).toBe('RBY');
        expect(imported[2].export(data_1.GEN[8])).toBe(TEAM);
        const again = teams_1.Teams.importTeams(team.pack());
        expect(again[0].export(data_1.GEN[8])).toBe(TEAM);
    });
});
//# sourceMappingURL=teams.test.js.map