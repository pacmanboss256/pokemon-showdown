import { AnyObject, Battle, Effect, GameTimerSettings, GameType, ID, ModdedBattlePokemon, ModdedBattleQueue, ModdedBattleScriptsData, ModdedField, Move, Pokemon, PokemonSet, PokemonSources, Species, TeamValidator } from './exported-global-types';
import { BasicEffect } from './dex-data';
import { EventMethods } from './dex-conditions';
export interface FormatData extends Partial<Format>, EventMethods {
    name: string;
}
export declare type FormatList = (FormatData | {
    section: string;
    column?: number;
})[];
export declare type ModdedFormatData = FormatData | Omit<FormatData, 'name'> & {
    inherit: true;
};
declare type FormatEffectType = 'Format' | 'Ruleset' | 'Rule' | 'ValidatorRule';
/** rule, source, limit, bans */
export declare type ComplexBan = [string, string, number, string[]];
export declare type ComplexTeamBan = ComplexBan;
/**
 * A RuleTable keeps track of the rules that a format has. The key can be:
 * - '[ruleid]' the ID of a rule in effect
 * - '-[thing]' or '-[category]:[thing]' ban a thing
 * - '+[thing]' or '+[category]:[thing]' allow a thing (override a ban)
 * [category] is one of: item, move, ability, species, basespecies
 *
 * The value is the name of the parent rule (blank for the active format).
 */
export declare class RuleTable extends Map<string, string> {
    complexBans: ComplexBan[];
    complexTeamBans: ComplexTeamBan[];
    checkLearnset: [Function, string] | null;
    timer: [Partial<GameTimerSettings>, string] | null;
    minSourceGen: [number, string] | null;
    constructor();
    isBanned(thing: string): boolean;
    isBannedSpecies(species: Species): boolean;
    isRestricted(thing: string): boolean;
    isRestrictedSpecies(species: Species): boolean;
    check(thing: string, setHas?: {
        [id: string]: true;
    } | null): string | null;
    getReason(key: string): string | null;
    getComplexBanIndex(complexBans: ComplexBan[], rule: string): number;
    addComplexBan(rule: string, source: string, limit: number, bans: string[]): void;
    addComplexTeamBan(rule: string, source: string, limit: number, bans: string[]): void;
}
export declare class Format extends BasicEffect implements Readonly<BasicEffect> {
    readonly mod: string;
    /**
     * Name of the team generator algorithm, if this format uses
     * random/fixed teams. null if players can bring teams.
     */
    readonly team?: string;
    readonly effectType: FormatEffectType;
    readonly debug: boolean;
    /**
     * Whether or not a format will update ladder points if searched
     * for using the "Battle!" button.
     * (Challenge and tournament games will never update ladder points.)
     * (Defaults to `true`.)
     */
    readonly rated: boolean | string;
    /** Game type. */
    readonly gameType: GameType;
    /** List of rule names. */
    readonly ruleset: string[];
    /**
     * Base list of rule names as specified in "./config/formats.ts".
     * Used in a custom format to correctly display the altered ruleset.
     */
    readonly baseRuleset: string[];
    /** List of banned effects. */
    readonly banlist: string[];
    /** List of effects that aren't completely banned. */
    readonly restricted: string[];
    /** List of inherited banned effects to override. */
    readonly unbanlist: string[];
    /** List of ruleset and banlist changes in a custom format. */
    readonly customRules: string[] | null;
    /** Table of rule names and banned effects. */
    ruleTable: RuleTable | null;
    /**
     * The number of Pokemon players can bring to battle and
     * the number that can actually be used.
     */
    readonly teamLength?: {
        battle?: number;
        validate?: [number, number];
    };
    /** An optional function that runs at the start of a battle. */
    readonly onBegin?: (this: Battle) => void;
    /** Pokemon must be obtained from this generation or later. */
    readonly minSourceGen?: number;
    /**
     * Maximum possible level pokemon you can bring. Note that this is
     * still 100 in VGC, because you can bring level 100 pokemon,
     * they'll just be set to level 50. Can be above 100 in special
     * formats.
     */
    readonly maxLevel: number;
    /**
     * Default level of a pokemon without level specified. Mainly
     * relevant to Custom Game where the default level is still 100
     * even though higher level pokemon can be brought.
     */
    readonly defaultLevel: number;
    /**
     * Forces all pokemon brought in to this level. Certain Game Freak
     * formats will change level 1 and level 100 pokemon to level 50,
     * which is what this does.
     *
     * You usually want maxForcedLevel instead, which will bring level
     * 100 pokemon down, but not level 1 pokemon up.
     */
    readonly forcedLevel?: number;
    /**
     * Forces all pokemon above this level down to this level. This
     * will allow e.g. level 50 Hydreigon in Gen 5, which is not
     * normally legal because Hydreigon doesn't evolve until level
     * 64.
     */
    readonly maxForcedLevel?: number;
    readonly noLog: boolean;
    readonly battle?: ModdedBattleScriptsData;
    readonly pokemon?: ModdedBattlePokemon;
    readonly queue?: ModdedBattleQueue;
    readonly field?: ModdedField;
    readonly cannotMega?: string[];
    readonly challengeShow?: boolean;
    readonly searchShow?: boolean;
    readonly threads?: string[];
    readonly timer?: Partial<GameTimerSettings>;
    readonly tournamentShow?: boolean;
    readonly checkLearnset?: (this: TeamValidator, move: Move, species: Species, setSources: PokemonSources, set: PokemonSet) => {
        type: string;
        [any: string]: any;
    } | null;
    readonly getEvoFamily?: (this: Format, speciesid: string) => ID;
    readonly getSharedPower?: (this: Format, pokemon: Pokemon) => Set<string>;
    readonly onAfterMega?: (this: Battle, pokemon: Pokemon) => void;
    readonly onChangeSet?: (this: TeamValidator, set: PokemonSet, format: Format, setHas?: AnyObject, teamHas?: AnyObject) => string[] | void;
    readonly onModifySpecies?: (this: Battle, species: Species, target?: Pokemon, source?: Pokemon, effect?: Effect) => Species | void;
    readonly onStart?: (this: Battle) => void;
    readonly onTeamPreview?: (this: Battle) => void;
    readonly onValidateSet?: (this: TeamValidator, set: PokemonSet, format: Format, setHas: AnyObject, teamHas: AnyObject) => string[] | void;
    readonly onValidateTeam?: (this: TeamValidator, team: PokemonSet[], format: Format, teamHas: AnyObject) => string[] | void;
    readonly validateSet?: (this: TeamValidator, set: PokemonSet, teamHas: AnyObject) => string[] | null;
    readonly validateTeam?: (this: TeamValidator, team: PokemonSet[], options?: {
        removeNicknames?: boolean;
        skipSets?: {
            [name: string]: {
                [key: string]: boolean;
            };
        };
    }) => string[] | void;
    readonly section?: string;
    readonly column?: number;
    constructor(data: AnyObject, ...moreData: (AnyObject | null)[]);
}
/** merges format lists from config/formats and config/custom-formats */
export declare function mergeFormatLists(main: FormatList, custom: FormatList | undefined): FormatList;
export {};
