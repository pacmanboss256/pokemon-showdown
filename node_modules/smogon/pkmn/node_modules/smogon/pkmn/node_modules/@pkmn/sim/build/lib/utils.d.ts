/**
 * Utils library
 *
 * Miscellaneous utility functions that don't really have a better place.
 *
 * It'll always be a judgment call whether or not a function goes into a
 * "catch-all" library like this, so here are some guidelines:
 *
 * - It must not have any dependencies
 *
 * - It must conceivably have a use in a wide variety of projects, not just
 *   Pokémon (if it's Pokémon-specific, Dex is probably a good place for it)
 *
 * - A lot of Chat functions are kind of iffy, but I'm going to say for now
 *   that if it's English-specific, it should be left out of here.
 */
declare type Comparable = number | string | boolean | Comparable[] | {
    reverse: Comparable;
};
export declare const Utils: {
    /**
     * Safely converts the passed variable into a string. Unlike '' + str,
     * String(str), or str.toString(), Utils.getString is guaranteed not to
     * crash.
     *
     * Specifically, the fear with untrusted JSON is an object like:
     *
     *     let a = {"toString": "this is not a function"};
     *     console.log(`a is ${a}`);
     *
     * This will crash (because a.toString() is not a function). Instead,
     * getString simply returns '' if the passed variable isn't a
     * string or a number.
     */
    getString(str: any): string;
    escapeRegex(str: string): string;
    /**
     * Escapes HTML in a string.
     */
    escapeHTML(str: string): string;
    /**
     * Strips HTML from a string.
     */
    stripHTML(htmlContent: string): string;
    /**
     * Visualizes eval output in a slightly more readable form
     */
    visualize(value: any, depth?: number): string;
    /**
     * Compares two variables; intended to be used as a smarter comparator.
     * The two variables must be the same type (TypeScript will not check this).
     *
     * - Numbers are sorted low-to-high, use `-val` to reverse
     * - Strings are sorted A to Z case-semi-insensitively, use `{reverse: val}` to reverse
     * - Booleans are sorted true-first (REVERSE of casting to numbers), use `!val` to reverse
     * - Arrays are sorted lexically in the order of their elements
     *
     * In other words: `[num, str]` will be sorted A to Z, `[num, {reverse: str}]` will be sorted Z to A.
     */
    compare(a: Comparable, b: Comparable): number;
    /**
     * Sorts an array according to the callback's output on its elements.
     *
     * The callback's output is compared according to `PSUtils.compare` (in
     * particular, it supports arrays so you can sort by multiple things).
     */
    sortBy<T>(array: T[], callback: (a: T) => Comparable): T[];
    /**
     * Sorts an array according to the callback's output on its elements.
     *
     * The callback's output is compared according to `PSUtils.compare` (in
     * particular, it supports arrays so you can sort by multiple things).
     */
    sortBy<T_2 extends Comparable>(array: T_2[]): T_2[];
    splitFirst(str: string, delimiter: string): [string, string];
    splitFirst(str: string, delimiter: string, limit: 2): [string, string, string];
    splitFirst(str: string, delimiter: string, limit: 3): [string, string, string, string];
    splitFirst(str: string, delimiter: string, limit: number): string[];
    /**
    * Template string tag function for escaping HTML
    */
    html(strings: TemplateStringsArray, ...args: any): string;
    shuffle<T_4>(arr: T_4[]): T_4[];
    /** Forces num to be an integer (between min and max). */
    clampIntRange(num: any, min?: number | undefined, max?: number | undefined): number;
    clearRequireCache(options?: {
        exclude?: string[];
    }): void;
    deepClone(obj: any): any;
    levenshtein(s: string, t: string, l: number): number;
};
export {};
